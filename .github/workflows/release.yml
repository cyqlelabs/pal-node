name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:coverage

      - name: Build package
        run: npm run build

      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag_name=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get the last release tag
          LAST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1)
          if [ -z "$LAST_TAG" ]; then
            # If no previous tag, get all commits
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" HEAD)
          else
            # Get commits since last tag
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD)
          fi

          # Create changelog
          CHANGELOG="## What's Changed"$'\n'
          if [ -z "$COMMITS" ]; then
            CHANGELOG+="- No changes since last release"
          else
            CHANGELOG+="$COMMITS"
          fi

          # Escape for GitHub output
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          release_name: Release ${{ steps.get_version.outputs.tag_name }}
          draft: false
          prerelease: false
          body: ${{ steps.changelog.outputs.changelog }}

      - name: Get built package info
        id: get_package_info
        run: |
          package_file=$(npm pack --dry-run | tail -1)
          echo "package_path=./$package_file" >> $GITHUB_OUTPUT
          echo "package_name=$package_file" >> $GITHUB_OUTPUT

      - name: Create package tarball
        run: npm pack

      - name: Upload package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.get_package_info.outputs.package_path }}
          asset_name: ${{ steps.get_package_info.outputs.package_name }}
          asset_content_type: application/gzip

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}